using System;
using Flame.Compiler;
using LLVMSharp;

namespace Flame.LLVM.Codegen
{
    /// <summary>
    /// A base class for LLVM code blocks.
    /// </summary>
    public abstract class CodeBlock : ICodeBlock
    {
        /// <summary>
        /// Gets the code generator for this code block.
        /// </summary>
        /// <returns>The code generator.</returns>
        public abstract ICodeGenerator CodeGenerator { get; }

        /// <summary>
        /// Gets the type of value produced by this code block.
        /// </summary>
        /// <returns>This code block's type.</returns>
        public abstract IType Type { get; }

        /// <summary>
        /// Emits this LLVM code block's contents to the given function and basic
        /// block.
        /// </summary>
        /// <param name="Function">The function to generate code for.</param>
        /// <param name="BasicBlock">The basic block to extend.</param>
        /// <returns>The next basic block to generate code for.</returns>
        public abstract BlockCodegen Emit(LLVMValueRef Function, LLVMBuilderRef BasicBlock);
    }

    /// <summary>
    /// Represents the code generated by an LLVM code block.
    /// </summary>
    public struct BlockCodegen
    {
        public BlockCodegen(LLVMBuilderRef BasicBlock, LLVMValueRef Value)
        {
            this.BasicBlock = BasicBlock;
            this.Value = Value;
        }

        /// <summary>
        /// Gets the next basic block to generate code for.
        /// </summary>
        /// <returns>The next basic block to generate code for.</returns>
        public LLVMBuilderRef BasicBlock { get; private set; }

        /// <summary>
        /// Gets the value that computes a code block's result.
        /// </summary>
        /// <returns>The code block's result.</returns>
        public LLVMValueRef Value { get; private set; }
    }
}

