init
{
    rt-flo-filename = ../runtime/bin/flo/runtime.flo;
    rt-obj-filename = ../runtime/bin/native/runtime.o;
    stdlib-flo-filename = ../stdlib/bin/flo/stdlib.flo;

    // Compiles input-file to a native executable and ensures
    // that its output matches the oracle.
    template CheckOutput<input-file, input, oracle>
    {
        run
        {
            // Run the executable and gather its output.
            return = @($exe-filename $input);
        }

        build
        {
            // Create some temporary files.
            flo-filename = @($create-temp-file flo);
            ll-filename = @($create-temp-file ll);
            exe-filename = @($create-temp-file exe);

            // Compile the C# source code to Flame IR.
            $ecsc $input-file -platform ir -environment standalone -Wno-build -fignore-main-prototype --rt-libs $stdlib-flo-filename $rt-flo-filename -o $flo-filename;

            // Compile the Flame IR to LLVM IR.
            $flame-llvm $flo-filename $stdlib-flo-filename -platform llvm -Wno-build -o $ll-filename --rt-libs $rt-flo-filename;

            // Compile the LLVM IR to a native executable and link in
            // the C standard library.
            $clang $ll-filename $rt-obj-filename -lgc -Wno-override-module -o $exe-filename;
        }

        init
        {
            // Set the expected return value.
            return = $oracle;
        }
    }
}

tests
{
    template CheckOutput<array/array.cs, aloha, aloha>;
    template CheckOutput<echo/echo.cs, howdy, howdy>;
    template CheckOutput<fibonacci/fibonacci.cs, 6, 8>;
    template CheckOutput<gc/main.cs, gc, gc>;
    template CheckOutput<hello-world/hello-world.cs, , hi>;
    template CheckOutput<inheritance/inheritance.cs, , 0 -22 45 100>;
    template CheckOutput<linked-list/linked-list.cs, , 1 2 4 8 16 32 64 128 256 512 1024>;
    template CheckOutput<property/property.cs, hello, hello>;
    template CheckOutput<static/static.cs, static-test, static-test>;
    template CheckOutput<stdlib-hello-world/stdlib-hello-world.cs, , hi>;
    template CheckOutput<struct/struct.cs, struct-test, struct-test>;
}